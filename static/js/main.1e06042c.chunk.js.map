{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","constants.js","containers/App.js","actions.js","registerServiceWorker.js","reportWebVitals.js","reducer.js","index.js"],"names":["Card","props","id","name","email","Fragment","className","alt","src","CardList","robotsPassed","RobotListComponent","map","user","i","SearchBox","searchField","inputSearch","type","placeholder","onChange","Scroll","style","overflow","border","height","children","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FFAILED","connect","state","searchRobots","searchFieldFromReducer","robotsReducer","requestRobots","isPending","dispatch","dataFromInpute","event","text","target","value","payload","onRequestRobots","a","axios","get","res","data","useState","count","setCount","useEffect","setTimeout","filteredRobots","filter","robot","toLowerCase","includes","onClick","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialSearch","initialRobotState","logger","createLogger","reducers","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1e06042c.chunk.js","sourcesContent":["import React from 'react';\n\n// class App extends React.Component {\n//   render() {\n//     return (\n//       <div className=\"App\">\n//         <header className=\"App-header\">\n//           <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//           <p>\n//             Edit <code>src/App.js</code> and save to reload.\n//           </p>\n//           <a\n//             className=\"App-link\"\n//             href=\"https://reactjs.org\"\n//             target=\"_blank\"\n//             rel=\"noopener noreferrer\"\n//           >\n//             Learn React\n//           </a>\n//         </header>\n//       </div>\n//     );\n//   }\n// }\n\nconst Card = (props) =>{\n  const {id, name, email} = props\n  \n  return (\n    <React.Fragment>\n    <section className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n    <img alt='profile' src={`https://robohash.org/${id}?200x200`}/>\n    <div>\n      <h3>{name}</h3>\n      <span>{email}</span>\n    </div>\n    </section>\n    </React.Fragment>\n  );\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = ({robotsPassed}) => {\n    const RobotListComponent = robotsPassed.map((user, i)=>{\n        return (\n            <Card key={robotsPassed[i].id} id={robotsPassed[i].id} name={robotsPassed[i].name} email={robotsPassed[i].email}/>\n        )\n    })\n    return (\n    <section>\n    {RobotListComponent}\n    </section>\n    )\n}\n\nexport default CardList","import React from 'react'\n\nconst SearchBox = ({searchField, inputSearch}) => {\n    return (\n        <div className='pa2'>\n            <input className='pa3 ba b--grean bg-lightest-blue' type='search' placeholder='Type your bot' onChange={inputSearch}></input>\n        </div>\n        \n    )\n}\n\nexport default SearchBox","import React from 'react'\n\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'scroll', border: '1px solid black', height: '600px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FFAILED = 'REQUEST_ROBOTS_FFAILED'\n\n","import {Fragment, useEffect, useState} from 'react'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport './App.css'\n// import axios from 'axios'\nimport Scroll from '../components/Scroll'\nimport {connect} from 'react-redux'\nimport {setSearchField, setRobotsFromActions} from '../actions' /// 1 mark /// 2\n\n\n// under this app we add all the app components\n// ==================================================================================================\n// parameter state comes from index.js provider store state(rootReducers)\n\n// get data from redux \nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchFieldFromReducer,\n        robotsReducer: state.requestRobots.robotsReducer,\n        isPending:state.requestRobots.isPending\n    }\n}\n// Send data to redux\n\n// dispatch the DOM changes to call an action. note mapStateToProps returns object, mapDispatchToProps returns function\n// the function returns an object then uses connect to change the data from redecers.\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        dataFromInpute: (event) => dispatch(setSearchField(event.target.value)), /// 1 mark\n        onRequestRobots: ()=> dispatch(setRobotsFromActions()) /// 2\n    }\n}\n// =============================================================================\n\nfunction App(props) {\n \n// from redux\nconst {searchField, dataFromInpute, onRequestRobots, isPending, robotsReducer} = props\n\n    // const [robotsNewFromSearch, setRobots] = useState([])\n    // const [searchField, setSearchField] = useState('')\n    // const [isPending, setIsPending] = useState(true);\n                                                                 const [count, setCount] = useState(0);\n                                        \n// -------------------------------------------------\n// passes data to searchfield \n// console.log(props)\n\n// =================== ---data flow---> ===============================\n// const dataFromInpute = (event) => {\n//     setSearchField(event.target.value)\n    \n// }\n//  ====================WE CAN USE EITHER THIS==============================================\n\n// componentDidMount(){\n    //  axios.get('https://jsonplaceholder.typicode.com/users')\n    //      .then(res => {\n    //      this.setState({\n    //         robotsNewFromSearch: res.data\n    //      })\n    //  })\n    //  .catch(function (error) {\n    //     console.log(error);\n    //   })\n// }\n// -----------------------OR THIS------------------------------------------------------------\n// const getUsers = async (api, callBack) => {\n//     try{\n//         let res = await axios.get(api);\n//         let { data } = res;\n//         callBack(data)\n        \n//         // setRobots(data);\n//     }\n//     catch(e) {\n//         console.log(e)\n//     }\n    \n// };\n\n// ======================== <-----data flow ========================\nuseEffect(() => {\n    \n    setTimeout(() => {   //timeout to test loading\n    // getUsers(\"https://jsonplaceholder.typicode.com/users\", setRobots)\n    // setIsPending(false);\n    onRequestRobots()\n}, 1000);\n    // document.title = `You clicked ${count} times`;\n},[])//if we add smth in the [], the dom is rerendered every time the value is changed\n\n\n\n\n// =================================================================================================\n\n// ------------------------------------------------\n  \n        const filteredRobots = robotsReducer.filter(robot=>{\n            return robot.name.toLowerCase().includes(searchField.toLowerCase())\n         })\n        //  ------------------------------------------------\n        \n        \n            return (\n                \n                <Fragment>\n                    <section className='tc'>\n                        \n                        {/* ================ */}\n                                            <p>You clicked {count} times</p>\n                                            <button onClick={() => setCount(count + 1)}>Click me</button>\n                        {/* ================= */}\n    \n                        <h1 className='f1'>Robo Friends</h1>    \n                        {/* data flow--inpute----> */}\n                        <SearchBox inputSearch={dataFromInpute}/>\n    \n                        {/* <----output----data flow */}\n                       <Scroll> \n                           {/* // handles loading */}\n                       { isPending && <div>Loading...</div> }                            \n                       {filteredRobots && <CardList robotsPassed={filteredRobots} />}\n                       </Scroll>\n                    </section>\n                </Fragment>     \n            )\n        \n\n    // }\n\n    // shouldComponentUpdate(nextProp,nextState){\n        //    we can compare the xurrent state and nextState to re-render up state update    \n    // }\n   \n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App)","import {CHANGE_SEARCHFIELD,\n        REQUEST_ROBOTS_PENDING,\n        REQUEST_ROBOTS_SUCCESS,\n        REQUEST_ROBOTS_FFAILED\n} from './constants'\nimport axios from 'axios'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\n\nexport const setRobotsFromActions = () => async (dispatch) => {\n    try{\n    dispatch({type:REQUEST_ROBOTS_PENDING});\n    const res = await axios.get(\"https://jsonplaceholder.typicode.com/users\")\n    const { data } = res;\n    dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data})\n    }catch(e){\n        dispatch({type:REQUEST_ROBOTS_FFAILED, payload: e})\n    }\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FFAILED\n} from './constants'\n\nconst initialSearch = {\n    searchFieldFromReducer: ''\n}\n\nexport const searchRobots = (state=initialSearch, action={}) => {\n    switch (action.type) {\n        case CHANGE_SEARCHFIELD:\n            return  {...state, searchFieldFromReducer:action.payload};\n        default:\n            return state\n    }\n}\n\nconst initialRobotState = {\n    robotsReducer: [],\n    isPending:true,\n    error:''\n}\n\nexport const requestRobots = (state=initialRobotState, action={}) => {\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending:true}\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robotsReducer: action.payload, isPending: false}\n        case REQUEST_ROBOTS_FFAILED:\n            return {...state, error:action.payload}\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux'\nimport thunkMiddleware from 'redux-thunk';\nimport {createStore, applyMiddleware, combineReducers} from 'redux'\nimport App from './containers/App'\nimport 'tachyons';\nimport './index.css'\nimport {createLogger} from 'redux-logger'\nimport registerServiceWorker from './registerServiceWorker';\n\n\nimport reportWebVitals from './reportWebVitals';\n\nimport {searchRobots, requestRobots} from './reducer'\nconst logger = createLogger()\n\nconst reducers = combineReducers({requestRobots,searchRobots})\n\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware, logger))\n\nReactDOM.render(\n  <Provider store={store}>\n        <App/>\n  </Provider>,\n  document.getElementById('root')\n);\nregisterServiceWorker();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals(console.log);\n\n\n"],"sourceRoot":""}